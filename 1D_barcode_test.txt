* 1D_barcode_test.hdev

dev_set_draw ('margin')
dev_update_window ('off')
dev_set_line_width (2)

codeType := 'Code 128'
*codeType := 'auto'

read_image(imgOriginal, '20160624_115458.png')
get_image_size(imgOriginal, imageWidth, imageHeight)

* sharpen image
emphasize(imgOriginal, imgOriginal, 7, 7, 1)

* convert to grayscale, Otsu thresh to a region, morph. op. to fill holes, then convert region back to an image
rgb1_to_gray(imgOriginal, imgOriginal)
binary_threshold(imgOriginal, regThresh, 'max_separability', 'light', UsedThreshold)
erosion_rectangle1(regThresh, regThresh, 3, 3)
dilation_rectangle1(regThresh, regThresh, 3, 3)
region_to_bin(regThresh, imgOriginal, 255, 0, imageWidth, imageHeight)

* can rotate or scale with this if needed
hom_mat2d_identity(homMat2D)
*hom_mat2d_rotate(homMat2D, rad(-40), imageWidth / 2, imageHeight / 2, homMat2D)
hom_mat2d_scale(homMat2D, 0.5, 0.5, 0, 0, homMat2D)
affine_trans_image(imgOriginal, imgOriginal, homMat2D, 'bilinear', 'true')

* use this to un-over-expose the image if necessary
*scale_image_range(imgOriginal, imgOriginal, [ 0, 0 ], [ 255, 225 ])

* instantiate the bar code model
create_bar_code_model([], [], barCodeHandle)

* various bar code params if needed . . .
set_bar_code_param(barCodeHandle, 'persistence', 1)
* set_bar_code_param(barCodeHandle, 'element_size_min', 1.0)
* set_bar_code_param(barCodeHandle, 'num_scanlines', 2)
* set_bar_code_param(barCodeHandle, 'element_size_max', 20.0)
* set_bar_code_param(barCodeHandle, 'majority_voting', 'true')
* set_bar_code_param(barCodeHandle, 'meas_param_estimation', 'true')
* set_bar_code_param(barCodeHandle, 'start_stop_tolerance', 'low')

dev_close_window()
dev_open_window(50, 300, imageWidth / 2, imageHeight / 2, 'black', windowHandle)

set_display_font(windowHandle, 14, 'mono', 'true', 'false')
dev_display(imgOriginal)
dev_set_color('green')

find_bar_code(imgOriginal, barCodeRegions, barCodeHandle, codeType, decodedDataStrings)

dev_set_color('green')
dev_display(barCodeRegions)
codeIsReadable := decodedDataStrings != []
if(codeIsReadable)
    disp_message(windowHandle, 'Code:' + decodedDataStrings, 'window', 32, 12, 'forest green', 'true')
else
    disp_message(windowHandle, 'Code: not readable', 'window', 32, 12, 'red', 'true')
endif
disp_continue_message(windowHandle, 'black', 'true')

get_bar_code_object(candidateRegions, barCodeHandle, 'all', 'candidate_regions')
count_obj(candidateRegions, numberCandidates)
if (numberCandidates == 0)
    disp_message(windowHandle, 'No candidates found', 'window', 32, 12, 'red', 'true')
else
    dev_set_color ('magenta')
    dev_display (candidateRegions)
    disp_message(windowHandle, 'candidateRegions: ' + numberCandidates, 'window', 52, 12, 'magenta', 'true')
endif

get_bar_code_result(barCodeHandle, 'all', 'decoded_types', decodedTypes)
get_bar_code_result(barCodeHandle, 0, 'status', status0)

if (|decodedTypes| == 0)
    get_bar_code_object(allScanlines, barCodeHandle, 'all', 'scanlines_all')
    dev_set_color('red')
    dev_display(allScanlines)
    disp_message (windowHandle, 'No valid scanlines found', 'window', 72, 12, 'red', 'true')
else
    get_bar_code_object (validScanlines, barCodeHandle, 0, 'scanlines_valid')
    dev_set_color('green')
    dev_display(validScanlines)
    disp_message(windowHandle, 'Valid scanlines detected', 'window', 72, 12, 'forest green', 'true')
endif

